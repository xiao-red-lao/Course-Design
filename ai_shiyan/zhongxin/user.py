# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'user.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QMessageBox
from service import myservice
import sys
sys.path.append("../") # 返回上层路径

class Ui_MainWindow(QMainWindow):
    # 构造方法
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setWindowFlags(QtCore.Qt.MSWindowsFixedSizeDialogHint)  # 只显示最小化和关闭按钮
        self.setupUi(self) # 初始化窗体设置


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 244)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.userinfo = QtWidgets.QLabel(self.splitter)
        self.userinfo.setObjectName("userinfo")
        self.textBrowser = QtWidgets.QTextBrowser(self.splitter)
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout.addWidget(self.splitter, 0, 0, 1, 1)
        self.splitter_2 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_2.setObjectName("splitter_2")
        self.pwd = QtWidgets.QLabel(self.splitter_2)
        self.pwd.setObjectName("pwd")
        self.comboBox = QtWidgets.QComboBox(self.splitter_2)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.pwdwrite = QtWidgets.QLineEdit(self.splitter_2)
        self.pwdwrite.setObjectName("pwdwrite")
        self.pwdbtn = QtWidgets.QPushButton(self.splitter_2)
        self.pwdbtn.setObjectName("pwdbtn")
        self.gridLayout.addWidget(self.splitter_2, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)
        self.pwdbtn.clicked.connect(self.xiugai)  # 绑定添加按钮的单击信号
        self.pwdwrite.textEdited.connect(self.check)
        self.reflash()




        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "用户信息维护"))
        self.userinfo.setText(_translate("MainWindow", "用户信息展示"))
        self.pwd.setText(_translate("MainWindow", "修改"))
        self.comboBox.setItemText(0, _translate("MainWindow", "姓名"))
        self.comboBox.setItemText(1, _translate("MainWindow", "手机"))
        self.comboBox.setItemText(2, _translate("MainWindow", "密码"))
        self.comboBox.setItemText(3, _translate("MainWindow", "性别"))
        self.pwdbtn.setText(_translate("MainWindow", "修改"))
    def xiugai(self):
        '''
        与按钮绑定，修改数据库
        '''
        try:
            t2=self.pwdwrite.text()
            t1=self.comboBox.currentText()
            if t1=="姓名":t1='Uname'
            elif t1=="密码":
                t1='password'
                myservice.exec("update tb_pwd set {}='{}' where user={}".format(t1, t2, myservice.userName, ))
                QMessageBox.information(None, '提示', '信息修改成功！', QMessageBox.Ok)
                return
            elif t1=="手机":t1='Utelephone'
            else: t1='Usex'
            myservice.exec("update tb_user set {}='{}' where Uuser={}".format(t1,t2,myservice.userName,))
            self.reflash()
            QMessageBox.information(None, '提示', '信息修改成功！', QMessageBox.Ok)
        except:
            QMessageBox.warning(None, '警告', '输入有误！', QMessageBox.Ok)



    def printf(self, mypstr):
        '''
        在文本框内打印
        自定义类print函数, 借用c语言
        printf
        Mypstr：是待显示的字符串
        '''
        self.textBrowser.append(str(mypstr))  # 在指定的区域显示提示信息
        self.cursor = self.textBrowser.textCursor()
        self.textBrowser.moveCursor(self.cursor.End)  # 光标移到最后，这样就会自动显示出来
        QtWidgets.QApplication.processEvents()  # 一定加上这个功能，不然有卡顿
    def reflash(self):
        '''
        刷新文本框，从数据库调用数据写入
        '''
        self.textBrowser.clear()
        sql = "select * from tb_user where Uuser= '{}'".format(myservice.userName)
        output = myservice.query2(sql)[0]
        txt = '账号名:{}\n姓名:{}\n账号类型:{}\n性别:{}\n电话:{}'.format(output[1], output[2], output[3], output[4], output[5])
        self.printf(txt)
    def check(self):
        '''
        调整单行输入框的显示模式，密码则改为密文输入
        '''
        if self.comboBox.currentText()=='密码': self.pwdwrite.setEchoMode(QtWidgets.QLineEdit.Password)
        else:self.pwdwrite.setEchoMode(QtWidgets.QLineEdit.Normal)




# 主方法
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow() # 创建窗体对象
    ui = Ui_MainWindow() # 创建PyQt5设计的窗体对象
    ui.setupUi(MainWindow) # 调用PyQt5窗体的方法对窗体对象进行初始化设置
    MainWindow.show() # 显示窗体
    sys.exit(app.exec_()) # 程序关闭时退出进程
    # t1="Utelephone"
    # t2="女"
    # print(myservice.exec("update tb_user set {}='{}' where Uuser={}".format(t1,t2,myservice.userName,).encode('utf8')))

